/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller.
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    {
        /// <summary>
        /// Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.
        /// </summary>
        /// <value>Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.</value>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// A list of order IDs to link this order to previous orders.
        /// </summary>
        /// <value>A list of order IDs to link this order to previous orders.</value>

        [DataMember(Name = "ref_order_ids")]
        public List<string> RefOrderIds { get; set; }

        /// <summary>
        /// Status of the order. Allowed values can be defined by the network policy
        /// </summary>
        /// <value>Status of the order. Allowed values can be defined by the network policy</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 0,
            /// <summary>
            /// Enum COMPLETEEnum for COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETEEnum = 1,
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 2
        }

        /// <summary>
        /// Status of the order. Allowed values can be defined by the network policy
        /// </summary>
        /// <value>Status of the order. Allowed values can be defined by the network policy</value>

        [DataMember(Name = "status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
        /// </summary>
        /// <value>This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DRAFTEnum for DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFTEnum = 0,
            /// <summary>
            /// Enum DEFAULTEnum for DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULTEnum = 1
        }

        /// <summary>
        /// This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
        /// </summary>
        /// <value>This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.</value>

        [DataMember(Name = "type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Details of the provider whose catalog items have been selected.
        /// </summary>
        /// <value>Details of the provider whose catalog items have been selected.</value>

        [DataMember(Name = "provider")]
        public Provider Provider { get; set; }

        /// <summary>
        /// The items purchased / availed in this order
        /// </summary>
        /// <value>The items purchased / availed in this order</value>

        [DataMember(Name = "items")]
        public List<Item> Items { get; set; }

        /// <summary>
        /// The add-ons purchased / availed in this order
        /// </summary>
        /// <value>The add-ons purchased / availed in this order</value>

        [DataMember(Name = "add_ons")]
        public List<AddOn> AddOns { get; set; }

        /// <summary>
        /// The offers applied in this order
        /// </summary>
        /// <value>The offers applied in this order</value>

        [DataMember(Name = "offers")]
        public List<Offer> Offers { get; set; }

        /// <summary>
        /// The billing details of this order
        /// </summary>
        /// <value>The billing details of this order</value>

        [DataMember(Name = "billing")]
        public Billing Billing { get; set; }

        /// <summary>
        /// The fulfillments involved in completing this order
        /// </summary>
        /// <value>The fulfillments involved in completing this order</value>

        [DataMember(Name = "fulfillments")]
        public List<Fulfillment> Fulfillments { get; set; }

        /// <summary>
        /// The cancellation details of this order
        /// </summary>
        /// <value>The cancellation details of this order</value>

        [DataMember(Name = "cancellation")]
        public Cancellation Cancellation { get; set; }

        /// <summary>
        /// Cancellation terms of this item
        /// </summary>
        /// <value>Cancellation terms of this item</value>

        [DataMember(Name = "cancellation_terms")]
        public List<CancellationTerm> CancellationTerms { get; set; }

        /// <summary>
        /// Refund terms of this item
        /// </summary>
        /// <value>Refund terms of this item</value>

        [DataMember(Name = "refund_terms")]
        public List<ItemRefundTerms> RefundTerms { get; set; }

        /// <summary>
        /// Replacement terms of this item
        /// </summary>
        /// <value>Replacement terms of this item</value>

        [DataMember(Name = "replacement_terms")]
        public List<ReplacementTerm> ReplacementTerms { get; set; }

        /// <summary>
        /// Return terms of this item
        /// </summary>
        /// <value>Return terms of this item</value>

        [DataMember(Name = "return_terms")]
        public List<ReturnTerm> ReturnTerms { get; set; }

        /// <summary>
        /// The mutually agreed upon quotation for this order.
        /// </summary>
        /// <value>The mutually agreed upon quotation for this order.</value>

        [DataMember(Name = "quote")]
        public Quotation Quote { get; set; }

        /// <summary>
        /// The terms of settlement for this order
        /// </summary>
        /// <value>The terms of settlement for this order</value>

        [DataMember(Name = "payments")]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// The date-time of creation of this order
        /// </summary>
        /// <value>The date-time of creation of this order</value>

        [DataMember(Name = "created_at")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The date-time of updated of this order
        /// </summary>
        /// <value>The date-time of updated of this order</value>

        [DataMember(Name = "updated_at")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Additional input required from the customer to confirm this order
        /// </summary>
        /// <value>Additional input required from the customer to confirm this order</value>

        [DataMember(Name = "xinput")]
        public XInput Xinput { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name = "tags")]
        public List<TagGroup> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RefOrderIds: ").Append(RefOrderIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  AddOns: ").Append(AddOns).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("  CancellationTerms: ").Append(CancellationTerms).Append("\n");
            sb.Append("  RefundTerms: ").Append(RefundTerms).Append("\n");
            sb.Append("  ReplacementTerms: ").Append(ReplacementTerms).Append("\n");
            sb.Append("  ReturnTerms: ").Append(ReturnTerms).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Xinput: ").Append(Xinput).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    RefOrderIds == other.RefOrderIds ||
                    RefOrderIds != null &&
                    RefOrderIds.SequenceEqual(other.RefOrderIds)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) &&
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) &&
                (
                    AddOns == other.AddOns ||
                    AddOns != null &&
                    AddOns.SequenceEqual(other.AddOns)
                ) &&
                (
                    Offers == other.Offers ||
                    Offers != null &&
                    Offers.SequenceEqual(other.Offers)
                ) &&
                (
                    Billing == other.Billing ||
                    Billing != null &&
                    Billing.Equals(other.Billing)
                ) &&
                (
                    Fulfillments == other.Fulfillments ||
                    Fulfillments != null &&
                    Fulfillments.SequenceEqual(other.Fulfillments)
                ) &&
                (
                    Cancellation == other.Cancellation ||
                    Cancellation != null &&
                    Cancellation.Equals(other.Cancellation)
                ) &&
                (
                    CancellationTerms == other.CancellationTerms ||
                    CancellationTerms != null &&
                    CancellationTerms.SequenceEqual(other.CancellationTerms)
                ) &&
                (
                    RefundTerms == other.RefundTerms ||
                    RefundTerms != null &&
                    RefundTerms.SequenceEqual(other.RefundTerms)
                ) &&
                (
                    ReplacementTerms == other.ReplacementTerms ||
                    ReplacementTerms != null &&
                    ReplacementTerms.SequenceEqual(other.ReplacementTerms)
                ) &&
                (
                    ReturnTerms == other.ReturnTerms ||
                    ReturnTerms != null &&
                    ReturnTerms.SequenceEqual(other.ReturnTerms)
                ) &&
                (
                    Quote == other.Quote ||
                    Quote != null &&
                    Quote.Equals(other.Quote)
                ) &&
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) &&
                (
                    Xinput == other.Xinput ||
                    Xinput != null &&
                    Xinput.Equals(other.Xinput)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (RefOrderIds != null)
                    hashCode = hashCode * 59 + RefOrderIds.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                if (AddOns != null)
                    hashCode = hashCode * 59 + AddOns.GetHashCode();
                if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                if (Billing != null)
                    hashCode = hashCode * 59 + Billing.GetHashCode();
                if (Fulfillments != null)
                    hashCode = hashCode * 59 + Fulfillments.GetHashCode();
                if (Cancellation != null)
                    hashCode = hashCode * 59 + Cancellation.GetHashCode();
                if (CancellationTerms != null)
                    hashCode = hashCode * 59 + CancellationTerms.GetHashCode();
                if (RefundTerms != null)
                    hashCode = hashCode * 59 + RefundTerms.GetHashCode();
                if (ReplacementTerms != null)
                    hashCode = hashCode * 59 + ReplacementTerms.GetHashCode();
                if (ReturnTerms != null)
                    hashCode = hashCode * 59 + ReturnTerms.GetHashCode();
                if (Quote != null)
                    hashCode = hashCode * 59 + Quote.GetHashCode();
                if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                if (Xinput != null)
                    hashCode = hashCode * 59 + Xinput.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
