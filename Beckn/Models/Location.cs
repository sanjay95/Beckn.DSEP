/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// The physical location of something
    /// </summary>
    [DataContract]
    public partial class Location : IEquatable<Location>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>

        [DataMember(Name = "descriptor")]
        public Descriptor Descriptor { get; set; }

        /// <summary>
        /// The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.
        /// </summary>
        /// <value>The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.</value>

        [DataMember(Name = "map_url")]
        public string MapUrl { get; set; }

        /// <summary>
        /// The GPS co-ordinates of this location.
        /// </summary>
        /// <value>The GPS co-ordinates of this location.</value>

        [DataMember(Name = "gps")]
        public string Gps { get; set; }

        /// <summary>
        /// The address of this location.
        /// </summary>
        /// <value>The address of this location.</value>

        [DataMember(Name = "address")]
        public string Address { get; set; }

        /// <summary>
        /// The city this location is, or is located within
        /// </summary>
        /// <value>The city this location is, or is located within</value>

        [DataMember(Name = "city")]
        public City City { get; set; }

        /// <summary>
        /// The state this location is, or is located within
        /// </summary>
        /// <value>The state this location is, or is located within</value>

        [DataMember(Name = "district")]
        public string District { get; set; }

        /// <summary>
        /// The state this location is, or is located within
        /// </summary>
        /// <value>The state this location is, or is located within</value>

        [DataMember(Name = "state")]
        public State State { get; set; }

        /// <summary>
        /// The country this location is, or is located within
        /// </summary>
        /// <value>The country this location is, or is located within</value>

        [DataMember(Name = "country")]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets AreaCode
        /// </summary>

        [DataMember(Name = "area_code")]
        public string AreaCode { get; set; }

        /// <summary>
        /// Gets or Sets Circle
        /// </summary>

        [DataMember(Name = "circle")]
        public Circle Circle { get; set; }

        /// <summary>
        /// The boundary polygon of this location
        /// </summary>
        /// <value>The boundary polygon of this location</value>

        [DataMember(Name = "polygon")]
        public string Polygon { get; set; }

        /// <summary>
        /// The three dimensional region describing this location
        /// </summary>
        /// <value>The three dimensional region describing this location</value>

        [DataMember(Name = "3dspace")]
        public string _3dspace { get; set; }

        /// <summary>
        /// The rating of this location
        /// </summary>
        /// <value>The rating of this location</value>

        [DataMember(Name = "rating")]
        public Rating Rating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  MapUrl: ").Append(MapUrl).Append("\n");
            sb.Append("  Gps: ").Append(Gps).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("  Circle: ").Append(Circle).Append("\n");
            sb.Append("  Polygon: ").Append(Polygon).Append("\n");
            sb.Append("  _3dspace: ").Append(_3dspace).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Location)obj);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="other">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Descriptor == other.Descriptor ||
                    Descriptor != null &&
                    Descriptor.Equals(other.Descriptor)
                ) &&
                (
                    MapUrl == other.MapUrl ||
                    MapUrl != null &&
                    MapUrl.Equals(other.MapUrl)
                ) &&
                (
                    Gps == other.Gps ||
                    Gps != null &&
                    Gps.Equals(other.Gps)
                ) &&
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) &&
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) &&
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) &&
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) &&
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) &&
                (
                    AreaCode == other.AreaCode ||
                    AreaCode != null &&
                    AreaCode.Equals(other.AreaCode)
                ) &&
                (
                    Circle == other.Circle ||
                    Circle != null &&
                    Circle.Equals(other.Circle)
                ) &&
                (
                    Polygon == other.Polygon ||
                    Polygon != null &&
                    Polygon.Equals(other.Polygon)
                ) &&
                (
                    _3dspace == other._3dspace ||
                    _3dspace != null &&
                    _3dspace.Equals(other._3dspace)
                ) &&
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Descriptor != null)
                    hashCode = hashCode * 59 + Descriptor.GetHashCode();
                if (MapUrl != null)
                    hashCode = hashCode * 59 + MapUrl.GetHashCode();
                if (Gps != null)
                    hashCode = hashCode * 59 + Gps.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (AreaCode != null)
                    hashCode = hashCode * 59 + AreaCode.GetHashCode();
                if (Circle != null)
                    hashCode = hashCode * 59 + Circle.GetHashCode();
                if (Polygon != null)
                    hashCode = hashCode * 59 + Polygon.GetHashCode();
                if (_3dspace != null)
                    hashCode = hashCode * 59 + _3dspace.GetHashCode();
                if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Location left, Location right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Location left, Location right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
