/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// Describes how a an order will be rendered/fulfilled to the end-customer
    /// </summary>
    [DataContract]
    public partial class Fulfillment : IEquatable<Fulfillment>
    {
        /// <summary>
        /// Unique reference ID to the fulfillment of an order
        /// </summary>
        /// <value>Unique reference ID to the fulfillment of an order</value>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.
        /// </summary>
        /// <value>A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.</value>

        [DataMember(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Whether the fulfillment can be rated or not
        /// </summary>
        /// <value>Whether the fulfillment can be rated or not</value>

        [DataMember(Name = "rateable")]
        public bool? Rateable { get; set; }

        /// <summary>
        /// The rating value of the fulfullment service.
        /// </summary>
        /// <value>The rating value of the fulfullment service.</value>

        [DataMember(Name = "rating")]
        public Rating Rating { get; set; }

        /// <summary>
        /// The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited &#x60;on_status&#x60; call.
        /// </summary>
        /// <value>The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited &#x60;on_status&#x60; call.</value>

        [DataMember(Name = "state")]
        public FulfillmentState State { get; set; }

        /// <summary>
        /// Indicates whether the fulfillment allows tracking
        /// </summary>
        /// <value>Indicates whether the fulfillment allows tracking</value>

        [DataMember(Name = "tracking")]
        public bool? Tracking { get; set; }

        /// <summary>
        /// The person that will ultimately receive the order
        /// </summary>
        /// <value>The person that will ultimately receive the order</value>

        [DataMember(Name = "customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The agent that is currently handling the fulfillment of the order
        /// </summary>
        /// <value>The agent that is currently handling the fulfillment of the order</value>

        [DataMember(Name = "agent")]
        public Agent Agent { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>

        [DataMember(Name = "contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>

        [DataMember(Name = "vehicle")]
        public Vehicle Vehicle { get; set; }

        /// <summary>
        /// The list of logical stops encountered during the fulfillment of an order.
        /// </summary>
        /// <value>The list of logical stops encountered during the fulfillment of an order.</value>

        [DataMember(Name = "stops")]
        public List<Stop> Stops { get; set; }

        /// <summary>
        /// The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.
        /// </summary>
        /// <value>The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.</value>

        [DataMember(Name = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name = "tags")]
        public List<TagGroup> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fulfillment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Rateable: ").Append(Rateable).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Fulfillment)obj);
        }

        /// <summary>
        /// Returns true if Fulfillment instances are equal
        /// </summary>
        /// <param name="other">Instance of Fulfillment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fulfillment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Rateable == other.Rateable ||
                    Rateable != null &&
                    Rateable.Equals(other.Rateable)
                ) &&
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) &&
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) &&
                (
                    Tracking == other.Tracking ||
                    Tracking != null &&
                    Tracking.Equals(other.Tracking)
                ) &&
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) &&
                (
                    Agent == other.Agent ||
                    Agent != null &&
                    Agent.Equals(other.Agent)
                ) &&
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) &&
                (
                    Vehicle == other.Vehicle ||
                    Vehicle != null &&
                    Vehicle.Equals(other.Vehicle)
                ) &&
                (
                    Stops == other.Stops ||
                    Stops != null &&
                    Stops.SequenceEqual(other.Stops)
                ) &&
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Rateable != null)
                    hashCode = hashCode * 59 + Rateable.GetHashCode();
                if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Tracking != null)
                    hashCode = hashCode * 59 + Tracking.GetHashCode();
                if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                if (Agent != null)
                    hashCode = hashCode * 59 + Agent.GetHashCode();
                if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                if (Vehicle != null)
                    hashCode = hashCode * 59 + Vehicle.GetHashCode();
                if (Stops != null)
                    hashCode = hashCode * 59 + Stops.GetHashCode();
                if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Fulfillment left, Fulfillment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Fulfillment left, Fulfillment right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
