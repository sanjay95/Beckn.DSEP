/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// Describes a cancellation event
    /// </summary>
    [DataContract]
    public partial class Cancellation : IEquatable<Cancellation>
    {
        /// <summary>
        /// Date-time when the order was cancelled by the buyer
        /// </summary>
        /// <value>Date-time when the order was cancelled by the buyer</value>

        [DataMember(Name = "time")]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Gets or Sets CancelledBy
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CancelledByEnum
        {
            /// <summary>
            /// Enum CONSUMEREnum for CONSUMER
            /// </summary>
            [EnumMember(Value = "CONSUMER")]
            CONSUMEREnum = 0,
            /// <summary>
            /// Enum PROVIDEREnum for PROVIDER
            /// </summary>
            [EnumMember(Value = "PROVIDER")]
            PROVIDEREnum = 1
        }

        /// <summary>
        /// Gets or Sets CancelledBy
        /// </summary>

        [DataMember(Name = "cancelled_by")]
        public CancelledByEnum? CancelledBy { get; set; }

        /// <summary>
        /// The reason for cancellation
        /// </summary>
        /// <value>The reason for cancellation</value>

        [DataMember(Name = "reason")]
        public Option Reason { get; set; }

        /// <summary>
        /// Any additional information regarding the nature of cancellation
        /// </summary>
        /// <value>Any additional information regarding the nature of cancellation</value>

        [DataMember(Name = "additional_description")]
        public Descriptor AdditionalDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cancellation {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  CancelledBy: ").Append(CancelledBy).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  AdditionalDescription: ").Append(AdditionalDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cancellation)obj);
        }

        /// <summary>
        /// Returns true if Cancellation instances are equal
        /// </summary>
        /// <param name="other">Instance of Cancellation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cancellation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) &&
                (
                    CancelledBy == other.CancelledBy ||
                    CancelledBy != null &&
                    CancelledBy.Equals(other.CancelledBy)
                ) &&
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) &&
                (
                    AdditionalDescription == other.AdditionalDescription ||
                    AdditionalDescription != null &&
                    AdditionalDescription.Equals(other.AdditionalDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                if (CancelledBy != null)
                    hashCode = hashCode * 59 + CancelledBy.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (AdditionalDescription != null)
                    hashCode = hashCode * 59 + AdditionalDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Cancellation left, Cancellation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cancellation left, Cancellation right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
