/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// Describes the billing details of an entity.&lt;br&gt;This has properties like name,organization,address,email,phone,time,tax_number, created_at,updated_at
    /// </summary>
    [DataContract]
    public partial class Billing : IEquatable<Billing>
    {
        /// <summary>
        /// Name of the billable entity
        /// </summary>
        /// <value>Name of the billable entity</value>

        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Details of the organization being billed.
        /// </summary>
        /// <value>Details of the organization being billed.</value>

        [DataMember(Name = "organization")]
        public Organization Organization { get; set; }

        /// <summary>
        /// The address of the billable entity
        /// </summary>
        /// <value>The address of the billable entity</value>

        [DataMember(Name = "address")]
        public string Address { get; set; }

        /// <summary>
        /// The state where the billable entity resides. This is important for state-level tax calculation
        /// </summary>
        /// <value>The state where the billable entity resides. This is important for state-level tax calculation</value>

        [DataMember(Name = "state")]
        public State State { get; set; }

        /// <summary>
        /// The city where the billable entity resides.
        /// </summary>
        /// <value>The city where the billable entity resides.</value>

        [DataMember(Name = "city")]
        public City City { get; set; }

        /// <summary>
        /// Email address where the bill is sent to
        /// </summary>
        /// <value>Email address where the bill is sent to</value>

        [DataMember(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Phone number of the billable entity
        /// </summary>
        /// <value>Phone number of the billable entity</value>

        [DataMember(Name = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Details regarding the billing period
        /// </summary>
        /// <value>Details regarding the billing period</value>

        [DataMember(Name = "time")]
        public Time Time { get; set; }

        /// <summary>
        /// ID of the billable entity as recognized by the taxation authority
        /// </summary>
        /// <value>ID of the billable entity as recognized by the taxation authority</value>

        [DataMember(Name = "tax_id")]
        public string TaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Billing {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Billing)obj);
        }

        /// <summary>
        /// Returns true if Billing instances are equal
        /// </summary>
        /// <param name="other">Instance of Billing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Billing other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) &&
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) &&
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) &&
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) &&
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) &&
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) &&
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) &&
                (
                    TaxId == other.TaxId ||
                    TaxId != null &&
                    TaxId.Equals(other.TaxId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                if (TaxId != null)
                    hashCode = hashCode * 59 + TaxId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Billing left, Billing right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Billing left, Billing right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
