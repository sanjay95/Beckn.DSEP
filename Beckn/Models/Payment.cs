/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{ 
    /// <summary>
    /// Describes the terms of settlement between the BAP and the BPP for a single transaction. When instantiated, this object contains &lt;ol&gt;&lt;li&gt;the amount that has to be settled,&lt;/li&gt;&lt;li&gt;The payment destination destination details&lt;/li&gt;&lt;li&gt;When the settlement should happen, and&lt;/li&gt;&lt;li&gt;A transaction reference ID&lt;/li&gt;&lt;/ol&gt;. During a transaction, the BPP reserves the right to decide the terms of payment. However, the BAP can send its terms to the BPP first. If the BPP does not agree to those terms, it must overwrite the terms and return them to the BAP. If overridden, the BAP must either agree to the terms sent by the BPP in order to preserve the provider&#x27;s autonomy, or abort the transaction. In case of such disagreements, the BAP and the BPP can perform offline negotiations on the payment terms. Once an agreement is reached, the BAP and BPP can resume transactions.
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// ID of the payment term that can be referred at an item or an order level in a catalog
        /// </summary>
        /// <value>ID of the payment term that can be referred at an item or an order level in a catalog</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// This field indicates who is the collector of payment. The BAP can set this value to &#x27;bap&#x27; if it wants to collect the payment first and  settle it to the BPP. If the BPP agrees to those terms, the BPP should not send the payment url. Alternatively, the BPP can set this field with the value &#x27;bpp&#x27; if it wants the payment to be made directly.
        /// </summary>
        /// <value>This field indicates who is the collector of payment. The BAP can set this value to &#x27;bap&#x27; if it wants to collect the payment first and  settle it to the BPP. If the BPP agrees to those terms, the BPP should not send the payment url. Alternatively, the BPP can set this field with the value &#x27;bpp&#x27; if it wants the payment to be made directly.</value>

        [DataMember(Name="collected_by")]
        public Object CollectedBy { get; set; }

        /// <summary>
        /// A payment url to be called by the BAP. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If tl_method &#x3D; http/get, then the payment details will be sent as url params. Two url param values, &#x60;&#x60;&#x60;$transaction_id&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;$amount&#x60;&#x60;&#x60; are mandatory.
        /// </summary>
        /// <value>A payment url to be called by the BAP. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If tl_method &#x3D; http/get, then the payment details will be sent as url params. Two url param values, &#x60;&#x60;&#x60;$transaction_id&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;$amount&#x60;&#x60;&#x60; are mandatory.</value>

        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets _Params
        /// </summary>

        [DataMember(Name="params")]
        public PaymentParams _Params { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PREORDEREnum for PRE-ORDER
            /// </summary>
            [EnumMember(Value = "PRE-ORDER")]
            PREORDEREnum = 0,
            /// <summary>
            /// Enum PREFULFILLMENTEnum for PRE-FULFILLMENT
            /// </summary>
            [EnumMember(Value = "PRE-FULFILLMENT")]
            PREFULFILLMENTEnum = 1,
            /// <summary>
            /// Enum ONFULFILLMENTEnum for ON-FULFILLMENT
            /// </summary>
            [EnumMember(Value = "ON-FULFILLMENT")]
            ONFULFILLMENTEnum = 2,
            /// <summary>
            /// Enum POSTFULFILLMENTEnum for POST-FULFILLMENT
            /// </summary>
            [EnumMember(Value = "POST-FULFILLMENT")]
            POSTFULFILLMENTEnum = 3        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PAIDEnum for PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAIDEnum = 0,
            /// <summary>
            /// Enum NOTPAIDEnum for NOT-PAID
            /// </summary>
            [EnumMember(Value = "NOT-PAID")]
            NOTPAIDEnum = 1        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>

        [DataMember(Name="time")]
        public Time Time { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name="tags")]
        public List<TagGroup> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CollectedBy: ").Append(CollectedBy).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CollectedBy == other.CollectedBy ||
                    CollectedBy != null &&
                    CollectedBy.Equals(other.CollectedBy)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    _Params == other._Params ||
                    _Params != null &&
                    _Params.Equals(other._Params)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CollectedBy != null)
                    hashCode = hashCode * 59 + CollectedBy.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (_Params != null)
                    hashCode = hashCode * 59 + _Params.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
