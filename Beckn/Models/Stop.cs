/*
 * Beckn Protocol Core
 *
 * Beckn Core Transaction API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Beckn.Models
{
    /// <summary>
    /// A logical point in space and time during the fulfillment of an order.
    /// </summary>
    [DataContract]
    public partial class Stop : IEquatable<Stop>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ParentStopId
        /// </summary>

        [DataMember(Name = "parent_stop_id")]
        public string ParentStopId { get; set; }

        /// <summary>
        /// Location of the stop
        /// </summary>
        /// <value>Location of the stop</value>

        [DataMember(Name = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// The type of stop. Allowed values of this property can be defined by the network policy.
        /// </summary>
        /// <value>The type of stop. Allowed values of this property can be defined by the network policy.</value>

        [DataMember(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Timings applicable at the stop.
        /// </summary>
        /// <value>Timings applicable at the stop.</value>

        [DataMember(Name = "time")]
        public Time Time { get; set; }

        /// <summary>
        /// Instructions that need to be followed at the stop
        /// </summary>
        /// <value>Instructions that need to be followed at the stop</value>

        [DataMember(Name = "instructions")]
        public Descriptor Instructions { get; set; }

        /// <summary>
        /// Contact details of the stop
        /// </summary>
        /// <value>Contact details of the stop</value>

        [DataMember(Name = "contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// The details of the person present at the stop
        /// </summary>
        /// <value>The details of the person present at the stop</value>

        [DataMember(Name = "person")]
        public Person Person { get; set; }

        /// <summary>
        /// Gets or Sets Authorization
        /// </summary>

        [DataMember(Name = "authorization")]
        public Authorization Authorization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stop {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentStopId: ").Append(ParentStopId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Authorization: ").Append(Authorization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Stop)obj);
        }

        /// <summary>
        /// Returns true if Stop instances are equal
        /// </summary>
        /// <param name="other">Instance of Stop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stop other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    ParentStopId == other.ParentStopId ||
                    ParentStopId != null &&
                    ParentStopId.Equals(other.ParentStopId)
                ) &&
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) &&
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    Instructions.Equals(other.Instructions)
                ) &&
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) &&
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.Equals(other.Person)
                ) &&
                (
                    Authorization == other.Authorization ||
                    Authorization != null &&
                    Authorization.Equals(other.Authorization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (ParentStopId != null)
                    hashCode = hashCode * 59 + ParentStopId.GetHashCode();
                if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                if (Authorization != null)
                    hashCode = hashCode * 59 + Authorization.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Stop left, Stop right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Stop left, Stop right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
